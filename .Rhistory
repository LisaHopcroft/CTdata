surgery_performed ) ) %>%
### RECIST at a later timepoint
mutate( RECIST_Wk12 = RECIST_Wk6-rnorm(number_of_participants, sd=2) %>% round ) %>%
mutate( RECIST_Wk12 = ifelse( RECIST_Wk12 > RECIST_Wk6,
RECIST_Wk12,
RECIST_Wk12) )
example_trial_data.0 %>%
### Fix label
mutate( Label = sprintf( "N%0*d", nchar(number_of_participants), idnum ) ) %>%
### Fix age
mutate( age = 80-abs(rnorm(number_of_participants, mean=10, sd=10)) %>% round ) %>%
### Have some random number of patients improve surgical outcome
mutate( surgery_performed = surgery_planned-rnorm(number_of_participants, sd=2) %>% round ) %>%
mutate( surgery_performed = ifelse( surgery_performed > surgery_planned,
surgery_planned,
surgery_performed) ) %>%
mutate( surgery_performed = ifelse( surgery_performed <= 0,
1,
surgery_performed ) ) %>%
mutate( surgery_performed = ifelse( surgery_performed > max(surgery_translation_table$code),
max(surgery_translation_table$code),
surgery_performed ) ) %>%
### RECIST at a later timepoint
mutate( RECIST_Wk12 = RECIST_Wk6-rnorm(number_of_participants, sd=1) %>% round ) %>%
mutate( RECIST_Wk12 = ifelse( RECIST_Wk12 > RECIST_Wk6,
RECIST_Wk12,
RECIST_Wk12) )
example_trial_data.0 %>%
### Fix label
mutate( Label = sprintf( "N%0*d", nchar(number_of_participants), idnum ) ) %>%
### Fix age
mutate( age = 80-abs(rnorm(number_of_participants, mean=10, sd=10)) %>% round ) %>%
### Have some random number of patients improve surgical outcome
mutate( surgery_performed = surgery_planned-rnorm(number_of_participants, sd=2) %>% round ) %>%
mutate( surgery_performed = ifelse( surgery_performed > surgery_planned,
surgery_planned,
surgery_performed) ) %>%
mutate( surgery_performed = ifelse( surgery_performed <= 0,
1,
surgery_performed ) ) %>%
mutate( surgery_performed = ifelse( surgery_performed > max(surgery_translation_table$code),
max(surgery_translation_table$code),
surgery_performed ) ) %>%
### RECIST at a later timepoint
mutate( RECIST_Wk12 = RECIST_Wk6-rnorm(number_of_participants, sd=1) %>% round ) %>%
mutate( RECIST_Wk12 = ifelse( RECIST_Wk12 > RECIST_Wk6,
RECIST_Wk12,
RECIST_Wk12) ) %>%
mutate( RECIST_Wk12 = ifelse( RECIST_Wk12 <= 0,
1,
RECIST_Wk12 ) )
example_trial_data.1 = example_trial_data.0 %>%
### Fix label
mutate( Label = sprintf( "N%0*d", nchar(number_of_participants), idnum ) ) %>%
### Fix age
mutate( age = 80-abs(rnorm(number_of_participants, mean=10, sd=10)) %>% round ) %>%
### Have some random number of patients improve surgical outcome
mutate( surgery_performed = surgery_planned-rnorm(number_of_participants, sd=2) %>% round ) %>%
mutate( surgery_performed = ifelse( surgery_performed > surgery_planned,
surgery_planned,
surgery_performed) ) %>%
mutate( surgery_performed = ifelse( surgery_performed <= 0,
1,
surgery_performed ) ) %>%
mutate( surgery_performed = ifelse( surgery_performed > max(surgery_translation_table$code),
max(surgery_translation_table$code),
surgery_performed ) ) %>%
### RECIST at a later timepoint
mutate( RECIST_Wk12 = RECIST_Wk6-rnorm(number_of_participants, sd=1) %>% round ) %>%
mutate( RECIST_Wk12 = ifelse( RECIST_Wk12 > RECIST_Wk6,
RECIST_Wk12,
RECIST_Wk12) ) %>%
mutate( RECIST_Wk12 = ifelse( RECIST_Wk12 <= 0,
1,
RECIST_Wk12 ) ) %>%
mutate( RECIST_Wk12 = ifelse( RECIST_Wk12 > max(RECIST_translation_table$code),
max(RECIST_translation_table$code),
RECIST_Wk12 ) )
example_trial_data.1
example_trial_data.2 = example_trial_data.1 %>%
mutate( Arm = recode(Arm,`0`="A", `1`="B")) %>%
mutate( Gender = recode( Gender, `1`="Female", `2`="Male")) %>%
mutate( Ethnicity = ethnicity_translation[ Ethnicity ]) %>%
mutate( surgery_planned = surgery_translation[ surgery_planned ] ) %>%
mutate( surgery_performed = surgery_translation[ surgery_performed ] ) %>%
mutate( RECIST_Wk6 = RECIST_translation[ RECIST_Wk6 ] ) %>%
mutate( RECIST_Wk12 = RECIST_translation[ RECIST_Wk12 ] )
]example_trial_data.2
example_trial_data.2
example_trial_data = example_trial_data.2 %>%
select( Label, Arm, Gender, Ethnicity, starts_with( "surgery"), starts_with( "RECIST" ) )
example_trial_data
example_trial_data.1
library( simstudy )
library( magrittr )
library( dplyr )
library( tibble )
source("CTdata_functions.R")
source("CTdata_translations.R")
set.seed(5482)
number_of_participants = 20
timepoint.list = sprintf( "T%d", 0:4 )
#####################################################################
### Initialise the data definition object                         ###
#####################################################################
trial_data.definition =
### Defining the gender variable
defData( varname = "Gender",
dist = "categorical",
formula = genCatFormula(0.50,0.50),
id = "idnum" ) %>%
defData( varname = "Arm",
dist = "binary",
formula = 0.5 ) %>%
defData( varname = "Ethnicity",
dist = "categorical",
formula = paste(sprintf("%.4f",ethnicity_translation_table$proportion),
collapse=";") ) %>%
defData( varname = "surgery_planned",
dist = "categorical",
formula = paste(sprintf("%.4f",surgery_translation_table$proportion),
collapse=";") ) %>%
defData( varname = "RECIST_Wk6",
dist = "categorical",
formula = paste(sprintf("%.4f",surgery_translation_table$proportion),
collapse=";") )
example_trial_data.0 = genData( number_of_participants,
trial_data.definition )
example_trial_data.1 = example_trial_data.0 %>%
### Fix label
mutate( Label = sprintf( "N%0*d", nchar(number_of_participants), idnum ) ) %>%
### Fix age
mutate( age = 80-abs(rnorm(number_of_participants, mean=10, sd=10)) %>% round ) %>%
### Have some random number of patients improve surgical outcome
mutate( surgery_performed = surgery_planned-rnorm(number_of_participants, sd=2) %>% round ) %>%
mutate( surgery_performed = ifelse( surgery_performed > surgery_planned,
surgery_planned,
surgery_performed) ) %>%
mutate( surgery_performed = ifelse( surgery_performed <= 0,
1,
surgery_performed ) ) %>%
mutate( surgery_performed = ifelse( surgery_performed > max(surgery_translation_table$code),
max(surgery_translation_table$code),
surgery_performed ) ) %>%
### RECIST at a later timepoint
mutate( RECIST_Wk12 = RECIST_Wk6-rnorm(number_of_participants, sd=1) %>% round ) %>%
mutate( RECIST_Wk12 = ifelse( RECIST_Wk12 > RECIST_Wk6,
RECIST_Wk12,
RECIST_Wk12) ) %>%
mutate( RECIST_Wk12 = ifelse( RECIST_Wk12 <= 0,
1,
RECIST_Wk12 ) ) %>%
mutate( RECIST_Wk12 = ifelse( RECIST_Wk12 > max(RECIST_translation_table$code),
max(RECIST_translation_table$code),
RECIST_Wk12 ) )
###
### Translation
###
example_trial_data.2 = example_trial_data.1 %>%
mutate( Arm = recode(Arm,`0`="A", `1`="B")) %>%
mutate( Gender = recode( Gender, `1`="Female", `2`="Male")) %>%
mutate( Ethnicity = ethnicity_translation[ Ethnicity ]) %>%
mutate( surgery_planned = surgery_translation[ surgery_planned ] ) %>%
mutate( surgery_performed = surgery_translation[ surgery_performed ] ) %>%
mutate( RECIST_Wk6_l = RECIST_translation[ RECIST_Wk6 ] ) %>%
mutate( RECIST_Wk12_l = RECIST_translation[ RECIST_Wk12 ] )
example_trial_data.2
RECIST_translation
example_trial_data.2 %>% select( ends_with( "Wk6"))
example_trial_data.2 %>% select( starts_with( "RECIST_Wk6"))
trial_data.definition =
### Defining the gender variable
defData( varname = "Gender",
dist = "categorical",
formula = genCatFormula(0.50,0.50),
id = "idnum" ) %>%
defData( varname = "Arm",
dist = "binary",
formula = 0.5 ) %>%
defData( varname = "Ethnicity",
dist = "categorical",
formula = paste(sprintf("%.4f",ethnicity_translation_table$proportion),
collapse=";") ) %>%
defData( varname = "surgery_planned",
dist = "categorical",
formula = paste(sprintf("%.4f",surgery_translation_table$proportion),
collapse=";") ) %>%
defData( varname = "RECIST_Wk6",
dist = "categorical",
formula = paste(sprintf("%.4f",RECIST_translation_table$proportion),
collapse=";") )
example_trial_data.0 = genData( number_of_participants,
trial_data.definition )
example_trial_data.1 = example_trial_data.0 %>%
### Fix label
mutate( Label = sprintf( "N%0*d", nchar(number_of_participants), idnum ) ) %>%
### Fix age
mutate( age = 80-abs(rnorm(number_of_participants, mean=10, sd=10)) %>% round ) %>%
### Have some random number of patients improve surgical outcome
mutate( surgery_performed = surgery_planned-rnorm(number_of_participants, sd=2) %>% round ) %>%
mutate( surgery_performed = ifelse( surgery_performed > surgery_planned,
surgery_planned,
surgery_performed) ) %>%
mutate( surgery_performed = ifelse( surgery_performed <= 0,
1,
surgery_performed ) ) %>%
mutate( surgery_performed = ifelse( surgery_performed > max(surgery_translation_table$code),
max(surgery_translation_table$code),
surgery_performed ) ) %>%
### RECIST at a later timepoint
mutate( RECIST_Wk12 = RECIST_Wk6-rnorm(number_of_participants, sd=1) %>% round ) %>%
mutate( RECIST_Wk12 = ifelse( RECIST_Wk12 > RECIST_Wk6,
RECIST_Wk12,
RECIST_Wk12) ) %>%
mutate( RECIST_Wk12 = ifelse( RECIST_Wk12 <= 0,
1,
RECIST_Wk12 ) ) %>%
mutate( RECIST_Wk12 = ifelse( RECIST_Wk12 > max(RECIST_translation_table$code),
max(RECIST_translation_table$code),
RECIST_Wk12 ) )
example_trial_data.2 = example_trial_data.1 %>%
mutate( Arm = recode(Arm,`0`="A", `1`="B")) %>%
mutate( Gender = recode( Gender, `1`="Female", `2`="Male")) %>%
mutate( Ethnicity = ethnicity_translation[ Ethnicity ]) %>%
mutate( surgery_planned = surgery_translation[ surgery_planned ] ) %>%
mutate( surgery_performed = surgery_translation[ surgery_performed ] ) %>%
mutate( RECIST_Wk6_l = RECIST_translation[ RECIST_Wk6 ] ) %>%
mutate( RECIST_Wk12_l = RECIST_translation[ RECIST_Wk12 ] )
example_trial_data.2 %>% select( starts_with( "RECIST_Wk6"))
source("00_generate-dataset1.R")
source("00_generate-dataset1.R")
do_list_extraction( this_data = example_trial_data,
this_var  = quo(surgery_planned),
vocab_for_variables = parameter.vocab
# these_levels = c( "Thrombus - Milked back into renal vein and side clamped",
#                   "Infra-hepatic (IVC clamping with no liver mobilisation)",
#                   "Retro-hepatic (liver mobilisation and clamping below hepatic veins)",
#                   "Retro-hepatic (liver mobilisation and clamping above hepatic veins)",
#                   "Supra-hepatic (infradiaphragmatic)",
#                   "Missing"),
# key_for_variables = glossary.key )
)
glossary.key = list( surgery_planned = "Surgery planned" )
parameter.vocab = list( Surgery_Nephr_Details_Plan_Contrl_IVC = c(
"Thrombus - Milked back into renal vein and side clamped",
"Infra-hepatic (IVC clamping with no liver mobilisation)",
"Retro-hepatic (liver mobilisation and clamping below hepatic veins)",
"Retro-hepatic (liver mobilisation and clamping above hepatic veins)",
"Supra-hepatic (infradiaphragmatic)",
"Supra-hepatic (supradiaphragmatic)") )
library(CTutils)
library(rlang)
do_list_extraction( this_data = example_trial_data,
this_var  = quo(surgery_planned),
vocab_for_variables = parameter.vocab
# these_levels = c( "Thrombus - Milked back into renal vein and side clamped",
#                   "Infra-hepatic (IVC clamping with no liver mobilisation)",
#                   "Retro-hepatic (liver mobilisation and clamping below hepatic veins)",
#                   "Retro-hepatic (liver mobilisation and clamping above hepatic veins)",
#                   "Supra-hepatic (infradiaphragmatic)",
#                   "Missing"),
# key_for_variables = glossary.key )
)
parameter.vocab = list( surgery_planned = c(
"Thrombus - Milked back into renal vein and side clamped",
"Infra-hepatic (IVC clamping with no liver mobilisation)",
"Retro-hepatic (liver mobilisation and clamping below hepatic veins)",
"Retro-hepatic (liver mobilisation and clamping above hepatic veins)",
"Supra-hepatic (infradiaphragmatic)",
"Supra-hepatic (supradiaphragmatic)") )
do_list_extraction( this_data = example_trial_data,
this_var  = quo(surgery_planned),
vocab_for_variables = parameter.vocab
# these_levels = c( "Thrombus - Milked back into renal vein and side clamped",
#                   "Infra-hepatic (IVC clamping with no liver mobilisation)",
#                   "Retro-hepatic (liver mobilisation and clamping below hepatic veins)",
#                   "Retro-hepatic (liver mobilisation and clamping above hepatic veins)",
#                   "Supra-hepatic (infradiaphragmatic)",
#                   "Missing"),
# key_for_variables = glossary.key )
)
binary_translation = list( `1` = "Yes",
`2` = "No" )
example_trial_data.2 = example_trial_data.1 %>%
mutate( Arm = recode(Arm,`0`="A", `1`="B")) %>%
mutate( Gender = recode( Gender, `1`="Female", `2`="Male")) %>%
mutate( Ethnicity = ethnicity_translation[ Ethnicity ]) %>%
mutate( surgery_planned = surgery_translation[ surgery_planned ] ) %>%
mutate( surgery_performed = surgery_translation[ surgery_performed ] ) %>%
mutate( RECIST_Wk6 = RECIST_translation[ RECIST_Wk6 ] ) %>%
mutate( RECIST_Wk12 = RECIST_translation[ RECIST_Wk12 ] ) %>%
mutate( Screening_PMH_Throm = binary_translation[ Screening_PMH_Throm] )
Screening_PMH_Throm
trial_data.definition =
### Defining the gender variable
defData( varname = "Gender",
dist = "categorical",
formula = genCatFormula(0.50,0.50),
id = "idnum" ) %>%
defData( varname = "Arm",
dist = "binary",
formula = 0.5 ) %>%
defData( varname = "Ethnicity",
dist = "categorical",
formula = paste(sprintf("%.4f",ethnicity_translation_table$proportion),
collapse=";") ) %>%
defData( varname = "surgery_planned",
dist = "categorical",
formula = paste(sprintf("%.4f",surgery_translation_table$proportion),
collapse=";") ) %>%
defData( varname = "RECIST_Wk6",
dist = "categorical",
formula = paste(sprintf("%.4f",RECIST_translation_table$proportion),
collapse=";") ) %>%
defData( varname = "Screening_PMH_Throm",
dist = "binary",
formula = 0.5 )
example_trial_data.0 = genData( number_of_participants,
trial_data.definition )
example_trial_data.1 = example_trial_data.0 %>%
### Fix label
mutate( Label = sprintf( "N%0*d", nchar(number_of_participants), idnum ) ) %>%
### Fix age
mutate( age = 80-abs(rnorm(number_of_participants, mean=10, sd=10)) %>% round ) %>%
### Have some random number of patients improve surgical outcome
mutate( surgery_performed = surgery_planned-rnorm(number_of_participants, sd=2) %>% round ) %>%
mutate( surgery_performed = ifelse( surgery_performed > surgery_planned,
surgery_planned,
surgery_performed) ) %>%
mutate( surgery_performed = ifelse( surgery_performed <= 0,
1,
surgery_performed ) ) %>%
mutate( surgery_performed = ifelse( surgery_performed > max(surgery_translation_table$code),
max(surgery_translation_table$code),
surgery_performed ) ) %>%
### RECIST at a later timepoint
mutate( RECIST_Wk12 = RECIST_Wk6-rnorm(number_of_participants, sd=1) %>% round ) %>%
mutate( RECIST_Wk12 = ifelse( RECIST_Wk12 > RECIST_Wk6,
RECIST_Wk12,
RECIST_Wk12) ) %>%
mutate( RECIST_Wk12 = ifelse( RECIST_Wk12 <= 0,
1,
RECIST_Wk12 ) ) %>%
mutate( RECIST_Wk12 = ifelse( RECIST_Wk12 > max(RECIST_translation_table$code),
max(RECIST_translation_table$code),
RECIST_Wk12 ) )
###
### Translation
###
example_trial_data.2 = example_trial_data.1 %>%
mutate( Arm = recode(Arm,`0`="A", `1`="B")) %>%
mutate( Gender = recode( Gender, `1`="Female", `2`="Male")) %>%
mutate( Ethnicity = ethnicity_translation[ Ethnicity ]) %>%
mutate( surgery_planned = surgery_translation[ surgery_planned ] ) %>%
mutate( surgery_performed = surgery_translation[ surgery_performed ] ) %>%
mutate( RECIST_Wk6 = RECIST_translation[ RECIST_Wk6 ] ) %>%
mutate( RECIST_Wk12 = RECIST_translation[ RECIST_Wk12 ] ) %>%
mutate( Screening_PMH_Throm = binary_translation[ Screening_PMH_Throm ] )
Screening_PMH_Throm
example_trial_data.1$Screening_PMH_Throm
example_trial_data.1 = example_trial_data.0 %>%
### Fix label
mutate( Label = sprintf( "N%0*d", nchar(number_of_participants), idnum ) ) %>%
### Fix age
mutate( age = 80-abs(rnorm(number_of_participants, mean=10, sd=10)) %>% round ) %>%
### Have some random number of patients improve surgical outcome
mutate( surgery_performed = surgery_planned-rnorm(number_of_participants, sd=2) %>% round ) %>%
mutate( surgery_performed = ifelse( surgery_performed > surgery_planned,
surgery_planned,
surgery_performed) ) %>%
mutate( surgery_performed = ifelse( surgery_performed <= 0,
1,
surgery_performed ) ) %>%
mutate( surgery_performed = ifelse( surgery_performed > max(surgery_translation_table$code),
max(surgery_translation_table$code),
surgery_performed ) ) %>%
### RECIST at a later timepoint
mutate( RECIST_Wk12 = RECIST_Wk6-rnorm(number_of_participants, sd=1) %>% round ) %>%
mutate( RECIST_Wk12 = ifelse( RECIST_Wk12 > RECIST_Wk6,
RECIST_Wk12,
RECIST_Wk12) ) %>%
mutate( RECIST_Wk12 = ifelse( RECIST_Wk12 <= 0,
1,
RECIST_Wk12 ) ) %>%
mutate( RECIST_Wk12 = ifelse( RECIST_Wk12 > max(RECIST_translation_table$code),
max(RECIST_translation_table$code),
RECIST_Wk12 ) ) %>%
### PMH Yes/No variables
mutate( Screening_PMH_Throm = Screening_PMH_Throm + 1 )
example_trial_data.2 = example_trial_data.1 %>%
mutate( Arm = recode(Arm,`0`="A", `1`="B")) %>%
mutate( Gender = recode( Gender, `1`="Female", `2`="Male")) %>%
mutate( Ethnicity = ethnicity_translation[ Ethnicity ]) %>%
mutate( surgery_planned = surgery_translation[ surgery_planned ] ) %>%
mutate( surgery_performed = surgery_translation[ surgery_performed ] ) %>%
mutate( RECIST_Wk6 = RECIST_translation[ RECIST_Wk6 ] ) %>%
mutate( RECIST_Wk12 = RECIST_translation[ RECIST_Wk12 ] ) %>%
mutate( Screening_PMH_Throm = binary_translation[ Screening_PMH_Throm ] )
example_trial_data.2
library( simstudy )
library( magrittr )
library( dplyr )
library( tibble )
source("CTdata_functions.R")
source("CTdata_translations.R")
set.seed(5482)
number_of_participants = 20
timepoint.list = sprintf( "T%d", 0:4 )
#####################################################################
### Initialise the data definition object                         ###
#####################################################################
trial_data.definition =
### Defining the gender variable
defData( varname = "Gender",
dist = "categorical",
formula = genCatFormula(0.50,0.50),
id = "idnum" ) %>%
defData( varname = "Arm",
dist = "binary",
formula = 0.5 ) %>%
defData( varname = "Ethnicity",
dist = "categorical",
formula = paste(sprintf("%.4f",ethnicity_translation_table$proportion),
collapse=";") ) %>%
defData( varname = "surgery_planned",
dist = "categorical",
formula = paste(sprintf("%.4f",surgery_translation_table$proportion),
collapse=";") ) %>%
defData( varname = "RECIST_Wk6",
dist = "categorical",
formula = paste(sprintf("%.4f",RECIST_translation_table$proportion),
collapse=";") ) %>%
defData( varname = "Screening_PMH_Throm",
dist = "binary",
formula = 0.5 ) %>%
defData( varname = "Screening_PMH_Cereb",
dist = "binary",
formula = 0.5 )
example_trial_data.0 = genData( number_of_participants,
trial_data.definition )
example_trial_data.1 = example_trial_data.0 %>%
### Fix label
mutate( Label = sprintf( "N%0*d", nchar(number_of_participants), idnum ) ) %>%
### Fix age
mutate( age = 80-abs(rnorm(number_of_participants, mean=10, sd=10)) %>% round ) %>%
### Have some random number of patients improve surgical outcome
mutate( surgery_performed = surgery_planned-rnorm(number_of_participants, sd=2) %>% round ) %>%
mutate( surgery_performed = ifelse( surgery_performed > surgery_planned,
surgery_planned,
surgery_performed) ) %>%
mutate( surgery_performed = ifelse( surgery_performed <= 0,
1,
surgery_performed ) ) %>%
mutate( surgery_performed = ifelse( surgery_performed > max(surgery_translation_table$code),
max(surgery_translation_table$code),
surgery_performed ) ) %>%
### RECIST at a later timepoint
mutate( RECIST_Wk12 = RECIST_Wk6-rnorm(number_of_participants, sd=1) %>% round ) %>%
mutate( RECIST_Wk12 = ifelse( RECIST_Wk12 > RECIST_Wk6,
RECIST_Wk12,
RECIST_Wk12) ) %>%
mutate( RECIST_Wk12 = ifelse( RECIST_Wk12 <= 0,
1,
RECIST_Wk12 ) ) %>%
mutate( RECIST_Wk12 = ifelse( RECIST_Wk12 > max(RECIST_translation_table$code),
max(RECIST_translation_table$code),
RECIST_Wk12 ) ) %>%
### PMH Yes/No variables
mutate( Screening_PMH_Throm = Screening_PMH_Throm + 1 ) %>%
mutate( Screening_PMH_Cereb = Screening_PMH_Cereb + 1 )
###
### Translation
###
example_trial_data.2 = example_trial_data.1 %>%
mutate( Arm = recode(Arm,`0`="A", `1`="B")) %>%
mutate( Gender = recode( Gender, `1`="Female", `2`="Male")) %>%
mutate( Ethnicity = ethnicity_translation[ Ethnicity ]) %>%
mutate( surgery_planned = surgery_translation[ surgery_planned ] ) %>%
mutate( surgery_performed = surgery_translation[ surgery_performed ] ) %>%
mutate( RECIST_Wk6 = RECIST_translation[ RECIST_Wk6 ] ) %>%
mutate( RECIST_Wk12 = RECIST_translation[ RECIST_Wk12 ] ) %>%
mutate( Screening_PMH_Throm = binary_translation[ Screening_PMH_Throm ] ) %>%
mutate( Screening_PMH_Cereb = binary_translation[ Screening_PMH_Cereb ] )
example_trial_data.data = example_trial_data.2 %>%
select( Label, Arm,
Gender, Ethnicity,
starts_with( "Screening"),
starts_with( "surgery" ),
starts_with( "RECIST" ) )
example_trial_data.data %>% colnames
example_trial_data.glossary = list(
Label = "Patient ID",
Arm = "Treatment Arm",
Gender = "Gender",
Ethnicity = "Ethnicity",
Screening_PMH_Throm = "Existing or previous thromboembolic conditions/events?",
Screening_PMH_Cereb = "Existing or previous cerebrovascular conditions/events?",
surgery_planned = "Planned control of IVC or renal vein",
surgery_performed = "Control of IVC or renal vein",
RECIST_Wk6 = "RECIST assessment @ Week 6",
RECIST_Wk12 = "RECIST assessment @ Week 12"
)
example_trial_data.vocabulary = list(
Arm = LETTERS[1:2]
)
example_trial_data.vocabulary
binary_translation
unlist( binary_translation )
source("00_generate-dataset1.R")
source("00_generate-dataset1.R")
source("data_definitions.R")
source("data_definitions.R")
